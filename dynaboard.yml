runtimeVersion: 0.3.5
name: Getting Started
description: ''
type: com.dynaboard/project
nodes:
  ROOT_NODE:
    type: ROOT_NODE
    name: ROOT_NODE
    slots:
      components:
        - nodeID: 61af232e-6b81-4544-8f00-c943e7c083a2
          orderKey: a0
      pages:
        - nodeID: 5aeb3de9-5348-4253-9b66-8f1c9d57b6a6
          orderKey: a0
        - nodeID: a58f0ad0-bc5d-417d-aace-8d94dffc2c7b
          orderKey: a0V
        - nodeID: 04ad44ef-195b-47a0-b261-f8bcb73fb459
          orderKey: a0l
      resources:
        - nodeID: 8f34af83-c724-4818-a0a9-4cbac532cfd5
          orderKey: a0
        - nodeID: 7818a6f7-3096-4a64-baf7-9fb2c3166de0
          orderKey: a1
        - nodeID: c038db71-e096-4432-bf8d-3e8bad052f6a
          orderKey: a2
        - nodeID: 1f81be44-bd5c-4161-a6e9-bebf92ca8a46
          orderKey: a3
  023e3997-1820-4356-8920-22a1e22776c1:
    type: TEXT
    name: textStepFirstComponentArea
    properties:
      fontSize: xl
      fontWeight: bold
      height: '2'
      left: '4'
      textAlign: center
      top: '11'
      value: Drag a Component Here!
      width: '6'
  04ad44ef-195b-47a0-b261-f8bcb73fb459:
    type: PAGE
    name: templates
    slots:
      canvas:
        - nodeID: 3273257f-e1c9-4698-92c2-c8d49cf3ff30
          orderKey: a0
        - nodeID: b46e2861-e155-4e98-94af-18fb160fe735
          orderKey: Zz
    properties:
      minWidth: 768px
  0a2f59fc-e7d1-4178-ac3d-09cb4c0e04f3:
    type: TEXT
    name: textHeader
    properties:
      fontSize: 3xl
      fontWeight: bold
      height: 60px
      value: Welcome to Dynaboard!
      width: 924px
  1e33b59d-d7b9-4230-bf59-6bd887aef34c:
    type: FUNCTION
    name: exampleInterpolationFunction
    properties:
      action:
        actionType: POP_TOAST
        dismissButton: Yum!
        duration: 5000
        message: I'm a {{inputStepBasicInterpolation.value || "Basic"}} toast!
        path: ''
        target: _self
        targetNode:
          ref: 8f34af83-c724-4818-a0a9-4cbac532cfd5
        variant: primary
  1f81be44-bd5c-4161-a6e9-bebf92ca8a46:
    type: RESOURCE/ONE_TIME_PIN_AUTH
    name: oneTimePinAuth1
  27b866cc-0a43-4095-a3ef-950a03367663:
    type: TEXT
    name: textStepInteractingWithComponentsHeader
    properties:
      fontSize: xl
      fontWeight: bold
      height: '1'
      value: 2) Interacting with Components
      verticalAlign: bottom
      width: '12'
  27d01e5e-95d7-4024-a816-c382f8b1fc69:
    type: TEXT
    name: textStepFirstComponentHeader
    properties:
      fontSize: xl
      fontWeight: bold
      height: '1'
      value: 3) Add Your First Component
      verticalAlign: bottom
      width: '12'
  29bd4661-e2aa-40e0-bb02-df08e21ad388:
    type: TEXT
    name: textSubheader
    properties:
      height: 60px
      renderMode: markdown
      styles: ''
      top: '5'
      value: >-
        This getting started guide is here to help you learn the in's and out's
        of Dynaboard in just a few minutes. Once you've learned the basics we
        have example apps, boilerplates, and additional documentation
        [additional documentation](https://dynaboard.com/docs) to help you start
        building!
      verticalAlign: top
      width: 924px
  30d8badd-70d9-4414-97b6-e07287e59f0c:
    type: TEXT
    name: textStepMakeThingsDynamicSubtitle
    properties:
      height: '6'
      renderMode: markdown
      styles: ''
      top: '2'
      value: >-
        Now that you know how to interact with and select components to edit,
        let's learn more about how to make them dynamically respond to data! 


        Our "double-curly" syntax `{{ "{\{ \}\}" }}` lets you write code nearly
        anywhere you want (in nearly every property on both components and
        resources). We call this interpolation, and we'll practice it in the
        next section. Switch back to `Test` mode and click the button below.
      verticalAlign: top
      width: '12'
  326d90c8-eb46-4b88-943d-a9545ac28c63:
    type: CHART
    name: chartAdvancedJS
    properties:
      dataSource: |-
        {{
          Object.entries(
            getRandomExampleData.data.data.reduce((accumulator, currentValue) => {
              if (!accumulator[currentValue.accountType]) {
                accumulator[currentValue.accountType] = 1
              } else {
                accumulator[currentValue.accountType]++
              }
              return accumulator
            }, {})
          ).map((entry) => {
            return { accountType: entry[0], accountCount: entry[1] }
          })
        }}
      dimensions:
        - id: 410a976e-e589-4100-82b6-9b73aa074fe8
          key: Untitled Dimension 1
          lineShape: spline
          markerColor: purple.500
          mode: lines
          name: '# of Accounts'
          side: left
          type: bar
          yKey: accountCount
      height: '20'
      horizontalAxisTitle: Account Type
      isInteractive: 'false'
      leftVerticalAxisTitle: '# of Accounts'
      title: Number of Accounts by Type
      top: '6'
      width: '12'
      xKey: accountType
  3273257f-e1c9-4698-92c2-c8d49cf3ff30:
    type: ITERATOR
    name: templateList
    properties:
      alignContent: center
      component: COMPONENT/61af232e-6b81-4544-8f00-c943e7c083a2
      data: |-
        [
          {
            templateImageLinkDark:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateUsersDark.af7c6ec5.png&w=640&q=75",
            templateImageLinkLight:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateUsersLight.d244dd42.png&w=640&q=75",
            templateTitleText: "User Admin Panel",
            templateDescText:
              "See how to build a data driven UI in Dynaboard involving the data table.",
            cardLink: "https://dynaboard.new/dynaboard/dynaboard--data-table",
          },
          {
            templateImageLinkDark:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateGPTDark.70117c38.png&w=640&q=75",
            templateImageLinkLight:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateGPTLight.eb1c3bb2.png&w=640&q=75",
            templateTitleText: "GPT-3 Playground",
            templateDescText:
              "Get a head start on building your own GPT-3 powered application with a pre-built UI and included prompt examples.",
            cardLink: "https://dynaboard.new/dynaboard/dynaboard--gpt3-playground",
          },
          {
            templateImageLinkDark:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateDemosDark.6741eeba.png&w=640&q=75",
            templateImageLinkLight:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateDemosLight.5f70eaaa.png&w=640&q=75",
            templateTitleText: "Lightning Demos",
            templateDescText:
              "Experince a complete application that leverages Dynaboard's built-in KV store for application storage.",
            cardLink: "https://dynaboard.new/dynaboard/dynaboard--lightning-demos",
          },
          {
            templateImageLinkDark:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateFeedDark.c7fcdde1.png&w=640&q=75",
            templateImageLinkLight:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateFeedLight.d7415e49.png&w=640&q=75",
            templateTitleText: "Hacker News Clone",
            templateDescText:
              "Explore the advanced styling capabilites of Dynaboard, and see an example of a UI involving custom components.",
            cardLink: "https://dynaboard.new/dynaboard/dynaboard--hacker-news",
          },
          {
            templateImageLinkDark:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateVizDark.893e4e60.png&w=640&q=75",
            templateImageLinkLight:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateVizLight.da6eba1c.png&w=640&q=75",
            templateTitleText: "Charts UI",
            templateDescText:
              "Dive into the charting capabilites of Dynaboard with a couple of different examples.",
            cardLink: "https://dynaboard.new/dynaboard/dynaboard--charts",
          },
          {
            templateImageLinkDark:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplatePrivateAppDark.d3daa24f.png&w=640&q=75",
            templateImageLinkLight:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplatePrivateAppDark.d3daa24f.png&w=640&q=75",
            templateTitleText: "Private App Boilerplate",
            templateDescText:
              "Learn how to build a private application in Dynaboard that requires authentication and how to secure it.",
            cardLink:
              "https://dynaboard.new/dynaboard/dynaboard--private-app-boilerplate",
          },
        ]
      distributeContent: center
      height: '73'
      layoutStyle: HORIZONTAL_STACK
      top: '6'
      width: '12'
      wrapContent: wrap
  391855d8-83c4-421c-96ed-79d6be6f0d77:
    type: TEXT
    name: textStepFirstComponentBody
    properties:
      height: '6'
      renderMode: markdown
      styles: ''
      top: '2'
      value: >-
        The data table, input, and dropdown are just a few of the UI components
        available in Dynaboard, so let's try adding some more components to this
        page. If you haven't already, switch back to `Edit` mode and check them
        out in the toolbar at the top of the screen.


        Once you've found a component you'd like to see, try dragging it into
        the container below. You can also delete the component by selecting it
        and pressing delete on your keyboard.
      verticalAlign: top
      width: '12'
  3dac381d-0c42-4b83-b852-d399441bf6a0:
    type: CONTAINER
    name: containerComponent
    slots:
      canvas:
        - nodeID: 023e3997-1820-4356-8920-22a1e22776c1
          orderKey: a0
    properties:
      backgroundColor: surface.200
      gridRowHeight: '16'
      gridRows: '0'
      height: '18'
      top: '9'
      width: '12'
  4298f146-c2ef-48a5-bebf-eca74cf71723:
    type: FUNCTION
    name: nextPage
    properties:
      action:
        actionType: NAVIGATE_TO_PAGE
        path: /templates
        target: _self
        targetNode:
          ref: 8f34af83-c724-4818-a0a9-4cbac532cfd5
  4503712d-3187-402a-a8b4-4d37c68d14d9:
    type: TEXT
    name: textStepInterpolationInFunctionsHeader
    properties:
      fontSize: xl
      fontWeight: bold
      height: '1'
      value: 2) Interpolation Inside of Functions
      verticalAlign: bottom
      width: '12'
  4bfa8df2-4df1-4a01-b8ea-3d6404038d18:
    type: TEXT
    name: descText
    properties:
      fontSize: sm
      height: '3'
      renderMode: markdown
      top: '14'
      value: '{{ $props.templateDescText }}'
      verticalAlign: top
      width: '12'
  4dc07e3e-403d-499d-ad85-d8276a8b3bb6:
    type: INPUT
    name: inputStepBasicInterpolation
    properties:
      height: '2'
      labelStyle: left
      left: '2'
      placeholder: Basic
      top: '8'
      width: '10'
  51f3641d-40a2-427d-93b0-15de34669fc6:
    type: TEXT
    name: textStepAdvancedJSHeader
    properties:
      fontSize: xl
      fontWeight: bold
      height: '1'
      value: 3) Advanced JavaScript Example
      verticalAlign: bottom
      width: '12'
  55ff6f4e-a38f-4649-aada-3ce074dce023:
    type: CONTAINER
    name: stepBasicInterpolation
    slots:
      canvas:
        - nodeID: d0d4161b-ad10-46a8-92ac-493b442caa22
          orderKey: Zx
        - nodeID: deacc279-17c8-47c2-ba93-28fa0bc45e3e
          orderKey: ZxV
        - nodeID: 4dc07e3e-403d-499d-ad85-d8276a8b3bb6
          orderKey: Zy
        - nodeID: 86be3c07-c257-4a81-ba5d-727e7f0b5fef
          orderKey: ZzV
    properties:
      borderRadius: '5'
      gridRowHeight: '22'
      gridRows: '0'
      height: 364px
      styles: |-
        element.styles {
          border-width: 1px;
          border-color: text.muted;
        }
      top: '11'
      width: fill
  56967eac-f86e-46b9-b5ff-5d9afe635432:
    type: CONTAINER
    name: stepLetsGetStarted
    slots:
      canvas:
        - nodeID: fedeac1a-159b-4e19-af31-49aab150ab28
          orderKey: Zv
        - nodeID: 76169d73-f4ef-4df8-99a4-0d46b3c50ab5
          orderKey: Zz
        - nodeID: 601de6dc-8e7d-4935-a2f1-11914abd9944
          orderKey: ZzV
    properties:
      borderRadius: '5'
      gridRowHeight: '22'
      gridRows: '0'
      height: fill
      styles: |-
        element.styles {
          border-width: 1px;
          border-color: text.muted;
        }
      top: '10'
      width: fill
  590f0a9f-7b03-4cfc-a76c-79689c4a9e7c:
    type: CONTAINER
    name: stepFirstComponent
    slots:
      canvas:
        - nodeID: 391855d8-83c4-421c-96ed-79d6be6f0d77
          orderKey: Zz
        - nodeID: 27d01e5e-95d7-4024-a816-c382f8b1fc69
          orderKey: Zy
        - nodeID: 3dac381d-0c42-4b83-b852-d399441bf6a0
          orderKey: Zx
    properties:
      borderRadius: '5'
      gridRowHeight: '22'
      gridRows: '0'
      height: 620px
      styles: |-
        element.styles {
          border-width: 1px;
          border-color: text.muted;
        }
      top: '80'
      width: fill
  5aeb3de9-5348-4253-9b66-8f1c9d57b6a6:
    type: PAGE
    name: index
    slots:
      canvas:
        - nodeID: 0a2f59fc-e7d1-4178-ac3d-09cb4c0e04f3
          orderKey: Zr
        - nodeID: 29bd4661-e2aa-40e0-bb02-df08e21ad388
          orderKey: Zs
        - nodeID: 56967eac-f86e-46b9-b5ff-5d9afe635432
          orderKey: Zt
        - nodeID: f1ba9371-abac-423d-9f17-00e6a54e1a3a
          orderKey: Zu
        - nodeID: 590f0a9f-7b03-4cfc-a76c-79689c4a9e7c
          orderKey: Zv
        - nodeID: d0bb41c4-ad04-4d6e-868e-eec0f4d13c8c
          orderKey: Zx
      functions:
        - nodeID: 8cba5efc-01ce-402f-832e-0ab517766f2d
          orderKey: a0
        - nodeID: 65bbb933-2f04-4796-afe7-506194721d32
          orderKey: Zz
    properties:
      layoutStyle: VERTICAL_STACK
      minHeight: 1280px
      minWidth: 768px
      styles: |-
        element.styles {

        }
  601de6dc-8e7d-4935-a2f1-11914abd9944:
    type: INLINE_REACT
    name: iconStepLetsGetStarted
    properties:
      componentSource: |-
        return function Component() {
          return (
            <div className="size">
              <svg
                viewBox="0 0 16 16"
                focusable="false"
                className="chakra-icon"
                aria-hidden="true"
              >
                <g fill="none" fill-rule="evenodd">
                  <path
                    fill="rgb(105, 103, 226)"
                    d="M9.47749 0.579264C10.8282 0.910258 12.0504 1.63434 12.9895 2.65996C13.9287 3.68557 14.5426 4.96664 14.7537 6.34118C14.9648 7.71571 14.7636 9.12198 14.1754 10.3821C14.1038 10.5357 14.0274 10.685 13.9463 10.8301C13.8201 11.0562 13.5345 11.137 13.3085 11.0107C13.0825 10.8845 13.0016 10.5989 13.1279 10.3729C13.1976 10.2481 13.2636 10.1191 13.3259 9.98564C13.8356 8.89351 14.01 7.67474 13.8271 6.48348C13.6442 5.29221 13.1121 4.18195 12.2981 3.29309C11.4842 2.40422 10.4249 1.77668 9.25435 1.48982C8.08376 1.20296 6.85439 1.26966 5.72171 1.68149C4.58902 2.09332 3.60389 2.83179 2.8909 3.8035C2.17791 4.77521 1.76908 5.93652 1.7161 7.14059C1.66312 8.34465 1.96838 9.53739 2.59327 10.568C3.21816 11.5985 4.13463 12.4207 5.22676 12.9304C5.3598 12.9925 5.49226 13.0486 5.62913 13.1014C5.8706 13.1948 5.99071 13.4662 5.89739 13.7076C5.80407 13.9491 5.53266 14.0692 5.29118 13.9759C5.13588 13.9159 4.98381 13.8516 4.83027 13.7799C3.57011 13.1918 2.51266 12.2432 1.79163 11.054C1.0706 9.86492 0.718375 8.48868 0.779503 7.09938C0.840632 5.71007 1.31236 4.37009 2.13505 3.24889C2.95773 2.12768 4.09442 1.27561 5.40136 0.800423C6.7083 0.325234 8.12681 0.24827 9.47749 0.579264Z M8.01845 6.49404C8.19468 6.53797 8.35388 6.63328 8.47583 6.76787L8.48558 6.77898L13.5565 12.7432C13.563 12.7509 13.5692 12.7587 13.5752 12.7668C13.6807 12.9083 13.742 13.0779 13.7514 13.2542C13.7608 13.4304 13.718 13.6056 13.6282 13.7575C13.5384 13.9095 13.4057 14.0316 13.2467 14.1084C13.0918 14.1832 12.9186 14.2118 12.748 14.1909L10.1884 13.9629L8.37273 15.7811C8.25558 15.9068 8.10464 15.9962 7.93789 16.0385C7.76665 16.0819 7.5864 16.0737 7.41984 16.0148C7.25328 15.956 7.10785 15.8492 7.00189 15.7078C6.89592 15.5665 6.83415 15.3969 6.82436 15.2206C6.82381 15.2108 6.82358 15.201 6.82365 15.1911L6.88103 7.35995L7.34977 7.36338L6.88148 7.34275C6.88947 7.1613 6.95122 6.98632 7.05886 6.84004C7.1665 6.69375 7.3152 6.58276 7.48605 6.52115C7.65691 6.45955 7.84222 6.45011 8.01845 6.49404ZM7.81797 7.44108L7.76209 15.0659L9.67996 13.1453C9.77813 13.047 9.91486 12.9973 10.0532 13.0096L12.7572 13.2505L7.81797 7.44108Z M10.5324 4.18954C9.96493 3.70883 9.28051 3.38666 8.54845 3.25567C7.8164 3.12467 7.06273 3.18952 6.36381 3.44364C5.6649 3.69776 5.04557 4.13211 4.5686 4.70269C4.09163 5.27327 3.77396 5.95979 3.64778 6.69269C3.52161 7.42559 3.59141 8.17882 3.85012 8.87605C4.10883 9.57328 4.54724 10.1897 5.12094 10.6629C5.32065 10.8277 5.61609 10.7993 5.78082 10.5996C5.94555 10.3999 5.91719 10.1045 5.71748 9.93973C5.27127 9.57167 4.93028 9.09221 4.72906 8.54992C4.52785 8.00763 4.47356 7.42178 4.57169 6.85175C4.66983 6.28172 4.9169 5.74776 5.28788 5.30397C5.65886 4.86019 6.14056 4.52236 6.68416 4.32471C7.22776 4.12707 7.81395 4.07663 8.38332 4.17851C8.9527 4.28039 9.48502 4.53097 9.92636 4.90486C10.3677 5.27874 10.7024 5.76265 10.8964 6.30754C11.0905 6.85243 11.1371 7.43894 11.0315 8.00763C10.9842 8.26216 11.1522 8.50682 11.4067 8.5541C11.6613 8.60137 11.9059 8.43335 11.9532 8.17882C12.089 7.44765 12.0291 6.69357 11.7796 5.99299C11.5301 5.29242 11.0998 4.67026 10.5324 4.18954Z"
                  ></path>
                </g>
              </svg>
            </div>
          )
        }
      height: '3'
      left: '11'
      styles: |-
        .size {
          width: 64px;
          height: 64px;
        }
      top: '3'
      width: '1'
  61af232e-6b81-4544-8f00-c943e7c083a2:
    type: COMPONENT
    name: templateCard
    slots:
      canvas:
        - nodeID: fe6a3b00-f219-4206-84f0-43573e303287
          orderKey: Zx
      functions:
        - nodeID: b42829d1-aa52-43c2-8ee4-9ea82493b792
          orderKey: a0
    properties:
      $props: |2-
          {
            templateImageLinkDark:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateGPTDark.70117c38.png&w=640&q=75",
            templateImageLinkLight:
              "https://dynaboard.app/_next/image?url=https%3A%2F%2Fapp-cdn.dynaboard.com%2Fportal-app%2F_next%2Fstatic%2Fmedia%2FtemplateGPTLight.eb1c3bb2.png&w=640&q=75",
            templateTitleText: "Example Template",
            templateDescText:
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
            cardLink: "https://dynaboard.new/",
          }
      height: 360px
      maxWidth: 420px
      mergeDefaultProps: false
      minWidth: 340px
      width: '{{ $app.viewportWidth < 1024 ? ''340px'' : ''420px'' }}'
  652f196d-4253-4f9c-85b8-1f844f60937f:
    type: CONTAINER
    name: stepNextUp
    slots:
      canvas:
        - nodeID: b64f391f-38be-4947-bf38-496abb546f3a
          orderKey: Zy
        - nodeID: 83ec7aea-9262-46aa-a18f-4badca4579e2
          orderKey: Zz
        - nodeID: f9f22903-fa56-4182-b327-af0acdec0d36
          orderKey: a0
    properties:
      borderRadius: '5'
      gridRowHeight: '22'
      gridRows: '0'
      height: 220px
      styles: |-
        element.styles {
          border-width: 1px;
          border-color: text.muted;
        }
      top: '102'
      width: fill
  65bbb933-2f04-4796-afe7-506194721d32:
    type: FUNCTION
    name: getRandomExampleData
    properties:
      action:
        actionType: PERFORM_REQUEST
        body: ''
        bodyType: application/json
        headers: []
        method: GET
        path: '?size=30'
        targetNode:
          ref: c038db71-e096-4432-bf8d-3e8bad052f6a
      runOnPageLoad: '{{true}}'
  73db1033-fbf3-4277-8ec1-b75de844859d:
    type: TEXT
    name: textHeader
    properties:
      fontSize: 3xl
      fontWeight: bold
      height: 60px
      value: Make Apps Dynamic with {{ "{{ Code Interpolation \}}" }}
      width: 924px
  76169d73-f4ef-4df8-99a4-0d46b3c50ab5:
    type: TEXT
    name: textStepLetsGetStartedBody
    properties:
      height: '11'
      renderMode: markdown
      styles: ''
      top: '2'
      value: >-
        In order to get started, switch to `Test` mode by clicking the button in
        the floating action bar at the bottom of the screen.


        `Test` mode lets you test and use UI components. Once you have swapped
        modes, scroll down to the next section to see some UI components in
        action.
      verticalAlign: top
      width: '9'
  7818a6f7-3096-4a64-baf7-9fb2c3166de0:
    type: RESOURCE/TYPESCRIPT_CLIENT
    name: typescriptClient1
  781e9c93-ea0f-4707-a7d6-d9a76fc41f84:
    type: TEXT
    name: textStepMakeThingsDynamicTitle
    properties:
      fontSize: xl
      fontWeight: bold
      height: '1'
      value: 4) Make Apps Dynamic with Interpolation
      verticalAlign: bottom
      width: '12'
  7e0ee4db-ca2e-4b47-8b08-e060969c486e:
    type: TEXT
    name: textStepAdvancedJSBody
    properties:
      height: '3'
      renderMode: markdown
      styles: |-
        :root {
          /* https://developer.mozilla.org/en-US/docs/Web/CSS/:root */
        }

        a {
          color: #6968C3;
          font-weight: 400;
          text-decoration: underline;
        }

        h1, h2, h3 {
          font-weight: 400;
          margin-bottom: 5px;
        }

        h4, h5, h6 {
          font-weight: 500;
          margin-bottom: 5px;
        }

        p {
          line-height: 1.8;
        }

        ol {
          margin-top: 10px;
        }

        ul {
          margin-top: 10px;
        }

        li {
          line-height: 1.6;
        }

        li em {
          line-height: 1.6;
        }

        code {
          padding: 0px 4px;
          border-radius: 4px;
        }
      top: '2'
      value: >-
        So far we’ve only returned a basic string value inside of an
        interpolation, however it’s possible to do much more. In the example
        below, we’re mapping over and returning a JSON object to populate the
        chart.
      verticalAlign: top
      width: '12'
  83ec7aea-9262-46aa-a18f-4badca4579e2:
    type: TEXT
    name: textStepNextUpBody
    properties:
      height: '3'
      renderMode: markdown
      styles: |-
        :root {
          /* https://developer.mozilla.org/en-US/docs/Web/CSS/:root */
        }

        a {
          color: #6968C3;
          font-weight: 400;
          text-decoration: underline;
        }

        h1, h2, h3 {
          font-weight: 400;
          margin-bottom: 5px;
        }

        h4, h5, h6 {
          font-weight: 500;
          margin-bottom: 5px;
        }

        p {
          line-height: 1.8;
        }

        ol {
          margin-top: 10px;
        }

        ul {
          margin-top: 10px;
        }

        li {
          line-height: 1.6;
        }

        li em {
          line-height: 1.6;
        }

        code {
          padding: 0px 4px;
          border-radius: 4px;
        }
      top: '2'
      value: >-
        Interpolation and functions go together hand-in-hand as a way to pass
        data back and forth between the UI of your application and back-end
        resources. The templates on the next page provide different examples of
        how this works in practice.
      verticalAlign: top
      width: '12'
  8463cf78-496e-4757-bfcc-af3ba1a79ae8:
    type: TEXT
    name: textStepInteractingWithComponentsBody
    properties:
      height: '3'
      renderMode: markdown
      styles: ''
      top: '2'
      value: >-
        Below we have a small user account management example that includes a
        data table, text input, and dropdown. With `Test` mode selected choose
        an account type, search for an account owner or sort the data table.
      verticalAlign: top
      width: '12'
  86be3c07-c257-4a81-ba5d-727e7f0b5fef:
    type: TEXT
    name: textStepBasicInterpolationBody2
    properties:
      height: '4'
      renderMode: markdown
      styles: ''
      top: '12'
      value: >-
        To see how it works select the header of this section. Once you've
        selected it, look in the `Value` field under the `Content` section in
        the properties panel on the right side of the screen.
      verticalAlign: top
      width: '12'
  8cba5efc-01ce-402f-832e-0ab517766f2d:
    type: FUNCTION
    name: nextPage
    properties:
      action:
        actionType: NAVIGATE_TO_PAGE
        path: /interpolation
        target: _self
        targetNode:
          ref: 8f34af83-c724-4818-a0a9-4cbac532cfd5
  8f34af83-c724-4818-a0a9-4cbac532cfd5:
    type: RESOURCE/BROWSER
    name: browser1
  968665fc-0536-405a-ab31-861ead1f98db:
    type: TEXT
    name: titleText
    properties:
      fontSize: xl
      fontWeight: bold
      height: '2'
      top: '12'
      value: '{{$props.templateTitleText}}'
      width: '12'
  97c5eeb2-6924-4130-806f-eb8abd4c2a8f:
    type: MEDIA
    name: coverImage
    properties:
      height: '11'
      objectFit: contain
      type: image
      url: >-
        {{ $app.colorMode === 'dark' ? $props.templateImageLinkDark :
        $props.templateImageLinkLight }}
      width: '12'
  9a8d82c6-efab-42c6-a742-e05e3f310737:
    type: CONTAINER
    name: stepAdvancedJS
    slots:
      canvas:
        - nodeID: 51f3641d-40a2-427d-93b0-15de34669fc6
          orderKey: Zw
        - nodeID: 7e0ee4db-ca2e-4b47-8b08-e060969c486e
          orderKey: ZwV
        - nodeID: 326d90c8-eb46-4b88-943d-a9545ac28c63
          orderKey: Zx
        - nodeID: ae3a9824-13d0-4c6b-bc7a-1d2fb4dd8ba7
          orderKey: Zz
    properties:
      borderRadius: '5'
      gridRowHeight: '22'
      gridRows: '0'
      height: 684px
      styles: |-
        element.styles {
          border-width: 1px;
          border-color: text.muted;
        }
      top: '58'
      width: fill
  a58f0ad0-bc5d-417d-aace-8d94dffc2c7b:
    type: PAGE
    name: interpolation
    slots:
      canvas:
        - nodeID: 73db1033-fbf3-4277-8ec1-b75de844859d
          orderKey: Zw
        - nodeID: d6ece88b-6cb6-48a8-b9d4-1cc58e027bd8
          orderKey: ZwV
        - nodeID: 55ff6f4e-a38f-4649-aada-3ce074dce023
          orderKey: Zy
        - nodeID: c78855dc-87d5-45ef-8dc0-5c933e7ef00a
          orderKey: ZyG
        - nodeID: 9a8d82c6-efab-42c6-a742-e05e3f310737
          orderKey: ZyV
        - nodeID: 652f196d-4253-4f9c-85b8-1f844f60937f
          orderKey: Zz
      functions:
        - nodeID: 4298f146-c2ef-48a5-bebf-eca74cf71723
          orderKey: Zy
        - nodeID: abf20f79-e93b-4b3c-90dd-824d8e434e05
          orderKey: Zz
        - nodeID: 1e33b59d-d7b9-4230-bf59-6bd887aef34c
          orderKey: a0
    properties:
      layoutStyle: VERTICAL_STACK
      minHeight: 1964px
      minWidth: 768px
  a9c92a59-ccd1-44fd-9754-04929855e061:
    type: TEXT
    name: textStepInterpolationInFunctionsBody
    properties:
      height: '3'
      renderMode: markdown
      styles: ''
      top: '2'
      value: >-
        Interpolation also works inside of functions that aren’t already
        JavaScript (it is typically not necessary inside TypeScript functions).
        The button below is attached to a function that opens a toast message.
      verticalAlign: top
      width: '12'
  abf20f79-e93b-4b3c-90dd-824d8e434e05:
    type: FUNCTION
    name: getRandomExampleData
    properties:
      action:
        actionType: PERFORM_REQUEST
        body: ''
        bodyType: application/json
        headers: []
        method: GET
        path: '?size=20'
        targetNode:
          ref: c038db71-e096-4432-bf8d-3e8bad052f6a
      runOnPageLoad: '{{true}}'
  ae3a9824-13d0-4c6b-bc7a-1d2fb4dd8ba7:
    type: TEXT
    name: textStepAdvancedJSBody2
    properties:
      height: '3'
      renderMode: markdown
      styles: |-
        :root {
          /* https://developer.mozilla.org/en-US/docs/Web/CSS/:root */
        }

        a {
          color: #6968C3;
          font-weight: 400;
          text-decoration: underline;
        }

        h1, h2, h3 {
          font-weight: 400;
          margin-bottom: 5px;
        }

        h4, h5, h6 {
          font-weight: 500;
          margin-bottom: 5px;
        }

        p {
          line-height: 1.8;
        }

        ol {
          margin-top: 10px;
        }

        ul {
          margin-top: 10px;
        }

        li {
          line-height: 1.6;
        }

        li em {
          line-height: 1.6;
        }

        code {
          padding: 0px 4px;
          border-radius: 4px;
        }
      top: '27'
      value: >-
        You can see what the code looks like by selecting the chart and going to
        the `Data Source` under the `Data` panel on the chart.
      verticalAlign: top
      width: '12'
  b1d8f4ab-d246-4c87-942a-3c4ee43d450c:
    type: DATA_TABLE
    name: dataTableStepLoadingData
    properties:
      autoColumns: false
      columns:
        - accessor: accountID
          allowSortBy: 'true'
          buttonText: Button
          dateTimeFormat: MMMM dd, y 'at' ttt
          header: accountID
          id: a38a63d3-568a-4983-aba9-2f554178b991
          isVisible: 'true'
          linkTarget: _blank
          minWidth: 15
          minWidthUnit: '%'
          onButtonClick: null
          renderAs: default
          width: 0
          widthUnit: '%'
        - accessor: accountOwner
          allowSortBy: 'true'
          buttonText: Button
          dateTimeFormat: MMMM dd, y 'at' ttt
          header: accountOwner
          id: ff47e8c8-b5ec-4682-a768-0fc9775d7338
          isVisible: 'true'
          linkTarget: _blank
          minWidth: 15
          minWidthUnit: '%'
          onButtonClick: null
          renderAs: default
          width: 0
          widthUnit: '%'
        - accessor: accountType
          allowSortBy: 'true'
          buttonText: Button
          dateTimeFormat: MMMM dd, y 'at' ttt
          header: accountType
          id: 69c247b2-edd0-4216-92c6-3b663ae4da19
          isVisible: 'true'
          linkTarget: _blank
          minWidth: 15
          minWidthUnit: '%'
          onButtonClick: null
          renderAs: default
          width: 19
          widthUnit: '%'
        - accessor: accountTotal
          allowSortBy: 'true'
          buttonText: Button
          dateTimeFormat: MMMM dd, y 'at' ttt
          header: accountTotal
          id: befcf09a-fa32-4a8a-b01a-e55baa11b23c
          isVisible: 'true'
          linkTarget: _blank
          minWidth: 15
          minWidthUnit: '%'
          onButtonClick: null
          renderAs: default
          width: 13
          widthUnit: '%'
        - accessor: currencyName
          allowSortBy: 'true'
          buttonText: Button
          dateTimeFormat: MMMM dd, y 'at' ttt
          header: currencyName
          id: fc121056-0a0c-41d4-89a7-567871103377
          isVisible: 'true'
          linkTarget: _blank
          minWidth: 15
          minWidthUnit: '%'
          onButtonClick: null
          renderAs: default
          width: 17
          widthUnit: '%'
        - accessor: currencyCode
          allowSortBy: 'true'
          buttonText: Button
          dateTimeFormat: MMMM dd, y 'at' ttt
          header: currencyCode
          id: 4d86d3a6-8366-4e86-a89b-5680cb21e2f1
          isVisible: 'true'
          linkTarget: _blank
          minWidth: 15
          minWidthUnit: '%'
          onButtonClick: null
          renderAs: default
          width: 0
          widthUnit: '%'
        - accessor: currencySymbol
          allowSortBy: 'true'
          buttonText: Button
          dateTimeFormat: MMMM dd, y 'at' ttt
          header: currencySymbol
          id: df7998a9-88ca-4f00-b24e-c470b04313da
          isVisible: 'false'
          linkTarget: _blank
          minWidth: 15
          minWidthUnit: '%'
          onButtonClick: null
          renderAs: default
          width: 0
          widthUnit: '%'
      data: >-
        {{getRandomExampleData.data.data.filter((item) =>
        dropdownAccountType.value ?item.accountType ===
        dropdownAccountType.value : true).filter((item) =>
        item.accountOwner.toLowerCase().includes(inputStepInteractingWithComponents.value.toLowerCase()))}}
      height: '21'
      top: '9'
      width: '12'
  b42829d1-aa52-43c2-8ee4-9ea82493b792:
    type: FUNCTION
    name: navigateToLink
    properties:
      action:
        actionType: NAVIGATE_TO_PAGE
        path: '{{$props.cardLink}}'
        target: _blank
        targetNode:
          ref: 8f34af83-c724-4818-a0a9-4cbac532cfd5
  b46e2861-e155-4e98-94af-18fb160fe735:
    type: TEXT
    name: textHeader
    properties:
      fontSize: 3xl
      fontWeight: bold
      height: '4'
      value: Let's Explore Templates!
      width: '12'
  b4c6c983-f33a-490b-9f5d-90d5e3c900b9:
    type: TEXT
    name: cardLink
    properties:
      height: '16'
      href: '{{$props.cardLink}}'
      renderMode: link
      target: _blank
      textDecorationLine: underline
      value: ''
      width: '12'
  b51f3f6c-56a1-496c-b5f2-f28b3a5137c0:
    type: TEXT
    name: textStepInteractingWithComponentsInfo
    properties:
      height: '9'
      renderMode: markdown
      styles: ''
      top: '31'
      value: >-
        All components have either a `.data` property or `.value` property that
        becomes the displayed data. In the case of the table above we've
        dynamically loaded data from a function. Try selecting it to see
        properties.


        If you checked out the `.data` property of the table above, you probably
        noticed something interesting. That's our "double-curly" syntax! It lets
        you write TypeScript / JavaScript in locations where it isn't normally
        possible to load dynamic data.


        _We'll cover how the data table reacts in real-time to input field
        changes on the next page._
      verticalAlign: top
      width: '12'
  b64f391f-38be-4947-bf38-496abb546f3a:
    type: TEXT
    name: textStepNextUpHeader
    properties:
      fontSize: xl
      fontWeight: bold
      height: '1'
      value: 4) Get Started Quickly with Templates
      verticalAlign: bottom
      width: '12'
  b94b1e88-800f-483c-a759-12fc670b8020:
    type: DROPDOWN
    name: dropdownAccountType
    properties:
      displayValues: ''
      fontSize: sm
      height: '2'
      label: Account Type
      labelStyle: left
      left: '8'
      top: '6'
      values: |-
        {{
          [
            ...getRandomExampleData.data.data.reduce((acc, current) => {
              return acc.add(current.accountType)
            }, new Set()),
          ]
        }}
      width: '5'
  c038db71-e096-4432-bf8d-3e8bad052f6a:
    type: RESOURCE/HTTP
    name: randomDataAPI
    properties:
      profiles:
        - baseURL: https://random-dynaboard.vercel.app/api/v2/finance
          environment: ''
          headers:
            - key: Content-Type
              value: application/json
  c1af4bdd-aacf-4d28-bcb9-8bc7ccade3ec:
    type: TEXT
    name: textStepInterpolationInFunctionsBody2
    properties:
      height: '4'
      renderMode: markdown
      styles: ''
      top: '11'
      value: >-
        To see how it works select the function in the bottom left corner of the
        screen under the `Page Functions` panel named
        `exampleInterpolationFunction`.
      verticalAlign: top
      width: '12'
  c78855dc-87d5-45ef-8dc0-5c933e7ef00a:
    type: CONTAINER
    name: stepInterpolationInFunctions
    slots:
      canvas:
        - nodeID: 4503712d-3187-402a-a8b4-4d37c68d14d9
          orderKey: Zy
        - nodeID: a9c92a59-ccd1-44fd-9754-04929855e061
          orderKey: ZzG
        - nodeID: dfb50d60-c27d-49bd-8e40-63436a68d44d
          orderKey: ZzK
        - nodeID: c1af4bdd-aacf-4d28-bcb9-8bc7ccade3ec
          orderKey: ZzO
    properties:
      borderRadius: '5'
      gridRowHeight: '22'
      gridRows: '0'
      height: 348px
      styles: |-
        element.styles {
          border-width: 1px;
          border-color: text.muted;
        }
      top: '35'
      width: fill
  d0bb41c4-ad04-4d6e-868e-eec0f4d13c8c:
    type: CONTAINER
    name: stepMakeThingsDynamic
    slots:
      canvas:
        - nodeID: e45f1ae2-44eb-43e4-80eb-9b2978a3b080
          orderKey: a0
        - nodeID: 30d8badd-70d9-4414-97b6-e07287e59f0c
          orderKey: Zz
        - nodeID: 781e9c93-ea0f-4707-a7d6-d9a76fc41f84
          orderKey: Zy
    properties:
      borderRadius: '5'
      gridRowHeight: '22'
      gridRows: '0'
      height: 284px
      styles: |-
        element.styles {
          border-width: 1px;
          border-color: text.muted;
        }
      top: '120'
      width: fill
  d0d4161b-ad10-46a8-92ac-493b442caa22:
    type: TEXT
    name: textStepBasicInterpolationHeader
    properties:
      fontSize: xl
      fontWeight: bold
      height: '1'
      value: 1) A {{inputStepBasicInterpolation.value || "Basic"}} Example
      verticalAlign: bottom
      width: '12'
  d6ece88b-6cb6-48a8-b9d4-1cc58e027bd8:
    type: TEXT
    name: textSubheader
    properties:
      height: 76px
      renderMode: markdown
      styles: ''
      top: '5'
      value: >-
        Interpolation using the "double-curly" syntax `{{ "{\{ code goes here
        \}\}" }}` is a core feature of building interactive Dynaboard apps. At a
        high level, interpolation lets you write JavaScript or TypeScript
        snippets and include their dynamic output almost anywhere.
      verticalAlign: top
      width: 924px
  d8353231-00f6-46b7-a2fe-b4e8b7f9b616:
    type: INPUT
    name: inputStepInteractingWithComponents
    properties:
      height: '2'
      labelStyle: left
      placeholder: Owner Name Search
      top: '6'
      width: '6'
  deacc279-17c8-47c2-ba93-28fa0bc45e3e:
    type: TEXT
    name: textStepBasicInterpolationBody
    properties:
      height: '4'
      renderMode: markdown
      styles: ''
      top: '2'
      value: >-
        One common use of interpolation is to have UI components update in
        real-time in response to data from functions, inputs, or other
        components. In this example we’ve connected the title of this section to
        the text input below (and given it a default value). Try typing in the
        input below:
      verticalAlign: top
      width: '12'
  dfb50d60-c27d-49bd-8e40-63436a68d44d:
    type: BUTTON
    name: buttonPopExampleToast
    properties:
      backgroundColor: purple.500
      height: '2'
      left: '5'
      onClick:
        function:
          ref: 1e33b59d-d7b9-4230-bf59-6bd887aef34c
      text: Yum! Toast
      top: '7'
      width: '4'
  e45f1ae2-44eb-43e4-80eb-9b2978a3b080:
    type: BUTTON
    name: buttonStepMakeThingsDynamic
    properties:
      backgroundColor: purple.500
      height: '2'
      left: '5'
      onClick:
        function:
          ref: 8cba5efc-01ce-402f-832e-0ab517766f2d
      text: Let's Make Things Dynamic!
      top: '9'
      width: '4'
  f1ba9371-abac-423d-9f17-00e6a54e1a3a:
    type: CONTAINER
    name: stepInteractingWithComponents
    slots:
      canvas:
        - nodeID: d8353231-00f6-46b7-a2fe-b4e8b7f9b616
          orderKey: Zy
        - nodeID: 8463cf78-496e-4757-bfcc-af3ba1a79ae8
          orderKey: ZwG
        - nodeID: 27b866cc-0a43-4095-a3ef-950a03367663
          orderKey: Zw
        - nodeID: b1d8f4ab-d246-4c87-942a-3c4ee43d450c
          orderKey: Zv
        - nodeID: b94b1e88-800f-483c-a759-12fc670b8020
          orderKey: Zu
        - nodeID: b51f3f6c-56a1-496c-b5f2-f28b3a5137c0
          orderKey: ZwV
    properties:
      borderRadius: '5'
      gridRowHeight: '22'
      gridRows: '0'
      height: 920px
      styles: |-
        element.styles {
          border-width: 1px;
          border-color: text.muted;
        }
      top: '24'
      width: fill
  f9f22903-fa56-4182-b327-af0acdec0d36:
    type: BUTTON
    name: buttonNextUp
    properties:
      backgroundColor: purple.500
      height: '2'
      left: '5'
      onClick:
        function:
          ref: 4298f146-c2ef-48a5-bebf-eca74cf71723
      text: Explore Templates
      top: '6'
      width: '4'
  fe6a3b00-f219-4206-84f0-43573e303287:
    type: CONTAINER
    name: cardContainer
    slots:
      canvas:
        - nodeID: 97c5eeb2-6924-4130-806f-eb8abd4c2a8f
          orderKey: a0
        - nodeID: 968665fc-0536-405a-ab31-861ead1f98db
          orderKey: Zz
        - nodeID: 4bfa8df2-4df1-4a01-b8ea-3d6404038d18
          orderKey: ZzV
        - nodeID: b4c6c983-f33a-490b-9f5d-90d5e3c900b9
          orderKey: Zy
    properties:
      backgroundColor: surface.200
      borderRadius: '6'
      gridColumnGap: ''
      gridRowGap: ''
      height: '16'
      overflow: hidden
      padding: '8'
      width: '12'
  fedeac1a-159b-4e19-af31-49aab150ab28:
    type: TEXT
    name: textStepLetsGetStartedHeader
    properties:
      fontSize: xl
      fontWeight: bold
      height: '1'
      value: Let's get started!
      verticalAlign: bottom
      width: '12'